name: Robot Framework CI

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Run workflow weekly
  schedule:
    # Every Monday at 6:00 AM UTC 0 6 * * 1
    # minute hour day month day-of-week
    - cron: '0 6 * * 1'

  # Allow manual triggering of the workflow
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run ImageMagick Command
        run: |
            export DISPLAY=
            convert input.png output.jpg    

      - name: Run a script
        run: echo "This job runs every 5 minutes and on push!"


      # Step 2: Set up Python environment
      - name: Use secret
        env:
            MY_SECRET: ${{ secrets.EMAIL }}
        run: echo "Using the secret"


      # Step 3: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.13.0  # You can change this to the Python version you're using

      # Step 4: Install dependencies

      - name: Install dependencies
        run: |
            pip install robotframework
            pip install robotframework-seleniumlibrary
            pip install -r requirement.txt
            pip install robotframework robotframework-requests

      # Step 5: Install necessary libraries for Chrome
      - name: Install Chrome Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3 \
            libxss1 \
            libappindicator1 \
            libindicator7 \
            fonts-liberation \
            libasound2 \
            libatk1.0-0 \
            libpangocairo-1.0-0 \
            libgtk-3-0 \
            libgbm-dev \
            libxshmfence-dev \
            libxrandr-dev \
            xvfb  # Install Xvfb for headless mode
      

      - name: Install Dependencies
        run: |
            sudo apt-get install -y libnss3 libxss1 libappindicator1 libindicator7 \
              fonts-liberation libasound2 libatk1.0-0 libpangocairo-1.0-0 libgtk-3-0 \
              libgbm-dev libxshmfence-dev libxrandr-dev
            python3 -m pip install --upgrade pip
            pip install selenium

      # Set up Google Chrome
      - name: Install Google Chrome
        run: |
            wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo apt install ./google-chrome-stable_current_amd64.deb -y

      # Download and set up ChromeDriver
      - name: Use Pre-installed ChromeDriver
        run: |
          echo "Using pre-installed ChromeDriver:"
          which chromedriver
          chromedriver --version


       # Step 6: Run Robot Framework tests with Xvfb
      - name: Run Robot Framework tests
        run: |
          export DISPLAY=:99  # Set display for headless mode using Xvfb
          Xvfb :99 -screen 0 1920x1080x24 &  # Start Xvfb in the background
          robot -d results Tests/CRM.robot
          
    
       # Step 7: Upload robot framework report
      - name: Upload robot framework report
        uses: actions/upload-artifact@v3
        with:
          name: robot-reports
          path: results/

      # Step 8: Send Email with the report attached (using Python)
      - name: Send Email with Report
        env:
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          EMAIL_SUBJECT: "Robot Framework Test Report"
        run: |
          python -m pip install secure-smtplib  # Install secure-smtplib if needed
          
          import smtplib
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText
          from email.mime.base import MIMEBase
          from email import encoders
          
          # Email configuration
          sender_email = "${{ secrets.EMAIL_USERNAME }}"
          receiver_email = "${{ secrets.EMAIL_TO }}"
          subject = "${{ secrets.EMAIL_SUBJECT }}"
          body = "Please find attached the Robot Framework test report."
          
          # Create message container
          msg = MIMEMultipart()
          msg['From'] = sender_email
          msg['To'] = receiver_email
          msg['Subject'] = subject
          
          msg.attach(MIMEText(body, 'plain'))
          
          # Attach the report file (adjust path as necessary)
          filename = 'results/report.html'  # Adjust based on your report file location and format
          
          attachment = open(filename, 'rb')
          
          part = MIMEBase('application', 'octet-stream')
          part.set_payload(attachment.read())
          
          encoders.encode_base64(part)
          
          part.add_header('Content-Disposition', f'attachment; filename={filename}')
          
          msg.attach(part)
          
          # Connect to server and send email
          try:
              server = smtplib.SMTP('smtp.gmail.com', 587)  # Use your SMTP server details here (e.g., Gmail)
              server.starttls()
              server.login(sender_email, "${{ secrets.EMAIL_PASSWORD }}")
              server.send_message(msg)
              print("Email sent successfully!")
          
              server.quit()
          
          except Exception as e:
              print(f"Failed to send email. Error: {e}")